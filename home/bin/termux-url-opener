# cspell:words ArcaneSavant acodec bestaudio bestvideo netrc qrencode termux

#!/data/data/com.termux/files/usr/bin/bash

########################################################################
# Termux URL Opener Handle
# Execute termux-url-opener
#
# Copyright (C) 2024 ArcaneSavant
#
# Author(s): ArcaneSavant <https://github.com/ArcaneSavant>
#
# Webpage  : https://github.com/ArcaneSavant/termux-spice
#
# Enjoy "Termux Spice"!
#
# License  : MIT License
########################################################################

# Set Global Variables
## Error Message
ERROR_MSG="Please enter a valid number from the available options."

## yt-dlp Configuration Location
YD_CFG="${HOME}/.config/yt-dlp/config"

## yt-dlp Options
YDO_COMMON="\
--force-ipv4 \
--concurrent-fragments 2 \
--throttled-rate 56K \
--output ${HOME}/storage/downloads/%(title)s.%(ext)s \
--no-overwrites \
--no-mtime \
--sleep-interval 5 \
--max-sleep-interval 15 \
--check-formats \
--merge-output-format mkv \
--embed-metadata \
--embed-chapters"

YDO_AUDIO="--extract-audio"

YDO_VIDEO="\
--sub-langs all,-live_chat \
--embed-subs"

BEST_AUDIO="(bestaudio[acodec^=opus]/bestaudio)"

# Choose an Operation to Perform
printf '%s\n' "Â© 2024 ArcaneSavant"
printf '%s\n\n' "https://github.com/ArcaneSavant/termux-spice"
printf '%s\n\n' "What should be done with \"${1}\"?"

printf '%s\n' "a) Generate QR Code with qrencode"
printf '%s\n' "b) Download Files with yt-dlp"
printf '%s\n' "c) Download Files with curl"
printf '%s\n' "x) Exit"

## Read User Choice
read -r CHOICE

## Perform Operation of Choice
case ${CHOICE} in

a)
  ### qrencode
  printf '%s\n' "To Display QR Code, Input 1"
  printf '%s\n' "To Save QR Code,    Input 2"

  #### Read and Validate User Input for qrencode
  read -r INPUT_QR

  if ! expr "${INPUT_QR}" : "^[1-2]" >/dev/null; then
    printf '\n%s\n' "${ERROR_MSG}"
    exit 1

  #### Display QR Code
  elif [ "${INPUT_QR}" -eq "1" ]; then
    qrencode --output=- --type=UTF8 --verbose "${1}" &&
      sleep 15

  #### Save QR Code
  elif [ "${INPUT_QR}" -eq "2" ]; then
    qrencode --output="${HOME}/storage/downloads/QR_$(date +%Y%m%d_%H%M%S).png" --size=18 --type=PNG --verbose "${1}" &&
      sleep 5
  fi
  ;;

b)
  ### yt-dlp
  printf '%s\n' "To Download Audio Only,  Input 1"
  printf '%s\n' "To Download 720p Video,  Input 2"
  printf '%s\n' "To Download 1080p Video, Input 3"
  printf '%s\n' "To Download 1440p Video, Input 4"
  printf '%s\n' "To Download 2160p Video, Input 5"
  printf '%s\n' "For Best Quality Video,  Input 0"

  #### Read and Validate User Input for yt-dlp
  read -r INPUT_YD

  if ! expr "${INPUT_YD}" : "^[0-5]" >/dev/null; then
    printf '\n%s\n' "${ERROR_MSG}"
    exit 1

  #### Update yt-dlp Configuration
  elif [ "${INPUT_YD}" -eq "1" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_AUDIO} --format \"${BEST_AUDIO}\"" >"${YD_CFG}"

  elif [ "${INPUT_YD}" -eq "2" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_VIDEO} --format \"bestvideo[height<=720]+${BEST_AUDIO}\"" >"${YD_CFG}"

  elif [ "${INPUT_YD}" -eq "3" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_VIDEO} --format \"bestvideo[height<=1080]+${BEST_AUDIO}\"" >"${YD_CFG}"

  elif [ "${INPUT_YD}" -eq "4" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_VIDEO} --format \"bestvideo[height<=1440]+${BEST_AUDIO}\"" >"${YD_CFG}"

  elif [ "${INPUT_YD}" -eq "5" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_VIDEO} --format \"bestvideo[height<=2160]+${BEST_AUDIO}\"" >"${YD_CFG}"

  elif [ "${INPUT_YD}" -eq "0" ]; then
    printf '%s\n' "${YDO_COMMON} ${YDO_VIDEO} --format \"bestvideo+${BEST_AUDIO}\"" >"${YD_CFG}"
  fi

  #### Download Files from the Shared URL with yt-dlp
  yt-dlp "${1}"
  ;;

c)
  ### curl

  #### Download Files from the Shared URL with curl
  curl --connect-timeout 15 --continue-at - --location --netrc-optional --output-dir "${HOME}/storage/downloads" \
    --parallel --parallel-immediate --remote-name --remote-time --remove-on-error "${1}"
  ;;

x)
  ### Gracefully Exit the Script
  exit 0
  ;;

*)
  ### Validate User Choice for the Case Statement
  printf '\n%s\n' "Bailing out, as it can only be attributed to human error."
  exit 1
  ;;
esac
